{"generator":"Code Snippets v2.14.1","date_created":"2021-06-18 18:48","snippets":[{"name":"Oxygen: Custom Fonts","desc":"Load custom fonts and inject to Oxygen.\n\nVersion 3.2.1, 2021-06-18\n\u00a9 2020-2021, Matthias Altmann\n\nInfo:\nen: <a href=\"https:\/\/www.altmann.de\/en\/blog-en\/code-snippet-integrate-custom-fonts-into-oxygen-en\/\" target=\"_blank\" rel=\"noopener\">https:\/\/www.altmann.de\/en\/blog-en\/code-snippet-integrate-custom-fonts-into-oxygen-en\/<\/a>\nde: <a href=\"https:\/\/www.altmann.de\/blog\/code-snippet-eigene-schriftarten-in-oxygen-integrieren\/\" target=\"_blank\" rel=\"noopener\">https:\/\/www.altmann.de\/blog\/code-snippet-eigene-schriftarten-in-oxygen-integrieren\/<\/a>","tags":["Oxygen"],"scope":"global","code":"\/*\nPlugin Name:  MA Custom Fonts\nDescription:  Load custom fonts and inject to Oxygen\nAuthor:       <a href=\"https:\/\/www.altmann.de\/\">Matthias Altmann<\/a>\nProject:      Code Snippet: Load custom fonts and inject to Oxygen\nVersion:      3.2.1\nPlugin URI:   https:\/\/www.altmann.de\/en\/blog-en\/code-snippet-integrate-custom-fonts-into-oxygen-en\/\nDescription:  en: https:\/\/www.altmann.de\/en\/blog-en\/code-snippet-integrate-custom-fonts-into-oxygen-en\/\n              de: https:\/\/www.altmann.de\/blog\/code-snippet-eigene-schriftarten-in-oxygen-integrieren\/\nCopyright:    \u00a9 2020-2021, Matthias Altmann\n\nVersion History:\nDate\t\tVersion\t\tDescription\n--------------------------------------------------------------------------------------------------------------\n2021-06-18\t3.2.1\t\tFix: Fixed bug in CSS for Gutenberg\n2021-06-18\t3.2.0\t\tNew Features:\n\t\t\t\t\t\t- Display Custom Fonts in Gutenberg (enqueue ma_customfonts.css for font definitions, \n\t\t\t\t\t\t  add custom style for display and text font from Oxygen global settings)\n\t\t\t\t\t\tChanges:\n\t\t\t\t\t\t- Auto-create folder \/wp-content\/uploads\/fonts\n2021-05-17\t3.1.3\t\tChanges:\n\t\t\t\t\t\t- Optimized init sequence\n\t\t\t\t\t\t- Emit implementation and version in CSS\n\t\t\t\t\t\t- Reversed Version History order\n2021-05-16\t3.1.2\t\tChanges:\n\t\t\t\t\t\t- Avoid font swap: Load ma-customfonts.css early; default font-display now \"block\"\n\t\t\t\t\t\tNew Features:\n\t\t\t\t\t\t- Allow space in addition to dashes to detect font weights and styles\n2021-03-21\t3.1.1\t\tFixes:\n\t\t\t\t\t\t- Fixed font loading in Gutenberg editor (with Oxygen Gutenberg Integration)\n2021-03-20\t3.1.0\t\tNew Features:\n\t\t\t\t\t\t- \"Oblique\" in font file name is now detected as italic style\n\t\t\t\t\t\t- Custom Fonts test: Option to show font weights\/styles without files as browser would \n\t\t\t\t\t\t  simulate. \n\t\t\t\t\t\tChanges:\n\t\t\t\t\t\t- Output Custom Font CSS in head instead of footer to prevent font swap\n\t\t\t\t\t\t- Custom Fonts test: Changed logic for output font samples and related file info\n\t\t\t\t\t\tFixes:\n\t\t\t\t\t\t- Custom Fonts test: Fixed font file count for fonts provided by Web Font Loader\n2021-03-08\t3.0.2\t\tFix:\n\t\t\t\t\t\t- Compatibility with Windows server and local dev environments.\n\t\t\t\t\t\t  (Thanks to Franz M\u00fcller for reporting and testing!)\n2021-02-23\t3.0.1\t\tFixes:\n\t\t\t\t\t\t- Compatibility with WordPress 5.6.2 (doesn't set REQUEST::action anymore)\n\t\t\t\t\t\t- Compatibility check with Swiss Knife's Font Manager feature\n\t\t\t\t\t\t- Compatibility with Swiss Knife (font lists did not display custom fonts light blue)\n2021-02-18\t3.0.0\t\tNew Features:\n\t\t\t\t\t\t- Support for font packages from Web Font Loader (https:\/\/webfontloader.altmann.de\/)\n\t\t\t\t\t\t- New configuration option: CSS output as inline CSS or external CSS file (cacheable)\n\t\t\t\t\t\t- New configuration option: CSS minimize (was controlled by debug switch before)\n\t\t\t\t\t\t- Changed configuration option: font-display may now be specified as desired, \n\t\t\t\t\t\t  default is now 'auto'\n2021-01-24 \t2.5.2\t\tNew Features:\n\t\t\t\t\t\t- Custom Fonts test (via Admin panel and shortcode) now allows custom sample text\n2021-01-23\t2.5.1\t\tFix:\n\t\t\t\t\t\t- Changed compatibility check process: \n\t\t\t\t\t\t  Changed Hook for plugin compatibility check from plugins_loaded to init\n\t\t\t\t\t\t  Check only if admin and function is_plugin_active exists\n\t\t\t\t\t\t  (Thanks to Sebastian Albert for reporting and testing!)\n2021-01-23\t2.5.0\t\tNew features:\n\t\t\t\t\t\t- WP Admin Menu: Appearance > Custom Fonts \n\t\t\t\t\t\t  Shows a list of all registered custom fonts, including samples, weights, formats\n\t\t\t\t\t\t  with adaptable sample font size \n\t\t\t\t\t\t- Detect font weight terms \"Book\" (400) and \"Demi\" (600) \n\t\t\t\t\t\tChanges:\n\t\t\t\t\t\t- Redesign of classes (MA_CustomFonts, ECF_Plugin)\n\t\t\t\t\t\t- Font swap is now a configuration option\n\t\t\t\t\t\t- Cut \"-webfont\" from font name\n2020-12-08\t2.2.5\t\tChanges:\n\t\t\t\t\t\t- In CSS, font sources are now listed in a prioritized order (eot,woff2,woff,ttf,otf,svg)\n\t\t\t\t\t\t  (Thanks to Viorel Cosmin Miron for reporting!)\n\t\t\t\t\t\t- Test shortcode now also displays available font formats\n2020-11-27\t2.2.4\t\tFix:\n\t\t\t\t\t\t- Corrected typo in variable name (2 occurrences) that could cause repeated search \n\t\t\t\t\t\t  for font files. (Thanks to Viorel Cosmin Miron for reporting!)\n2020-11-25\t2.2.3\t\tChanges:\n\t\t\t\t\t\t- In Oxygen font selectors the custom fonts are now displayed in lightblue \n\t\t\t\t\t\t  to distinguish from default, websafe and Google Fonts \n2020-11-25\t2.2.2\t\tNew features:\n\t\t\t\t\t\t- Partial support for fonts with variable weights, detected by \"VariableFont\" in \n\t\t\t\t\t\t  filename. CSS output as font-weight:100 900;\n2020-11-24\t2.2.1\t\tNew features:\n\t\t\t\t\t\t- Shortcode [ maltmann_custom_font_test ] for listing all custom fonts with their weights \n\t\t\t\t\t\t  and styles\n\t\t\t\t\t\tChanges:\n\t\t\t\t\t\t- Fonts are now sorted alphabetically for e.g. CSS output\n\t\t\t\t\t\t- Added more request rules to skipping code execution when not needed\n2020-11-23\t2.2.0\t\tNew features:\n\t\t\t\t\t\t- Detection of font weight from number values \n\t\t\t\t\t\t- CSS now contains font-display:swap;\n2020-10-03 \t2.1.1\t\tFix:\n\t\t\t\t\t\t- Handle empty fonts folder correctly. (Thanks to Mario Peischl for reporting!)\n\t\t\t\t\t\t- Corrected title and file name (typo \"cutsom\") of Code Snippet\n2020-09-16\t2.1.0\t\tNew features:\n\t\t\t\t\t\t- Detection of font weight and style from file name\n\t\t\t\t\t\tFixes:\n\t\t\t\t\t\t- EOT: Typo in extension detection\n\t\t\t\t\t\t- EOT: Missing quote in style output\n2020-09-15\t2.0.0\t\tImproved version\n\t\t\t\t\t\t- Finds all font files (eot, otf, svg, ttf, woff, woff2) in directory wp-content\/uploads\/fonts\/\n\t\t\t\t\t\t- Optionally recursive\n\t\t\t\t\t\t- Takes font name from file name\n\t\t\t\t\t\t- Emits optimized CSS with alternative font formats\n\t\t\t\t\t\t- Special handling for EOT for Internet Explorer\n2020-04-10\t1.0.0\t\tInitial Release for customer project\n--------------------------------------------------------------------------------------------------------------\n*\/\n\n\n\nif (!class_exists('MA_CustomFonts')) :\nclass MA_CustomFonts {\n\n\tconst TITLE     \t= 'MA Custom Fonts';\n\tconst VERSION   \t= '3.2.1';\n\n\t\/\/ ===== CONFIGURATION =====\n\tpublic static $recursive \t\t= true; \t\/\/ enables recursive file scan\n\tpublic static $parsename \t\t= true; \t\/\/ enables parsing font weight and style from file name\n\tpublic static $fontdisplay\t\t= 'block';\t\/\/ set font-display to auto, block, swap, fallback, optional or '' (disable)\n\tpublic static $cssoutput\t\t= 'file';\t\/\/ set to 'html' to output CSS inline into page, \n\t\t\t\t\t\t\t\t\t\t\t\t\/\/ set to 'file' to create and reference a CSS file (cacheable by browser)\n\tpublic static $cssminimize\t\t= true; \t\/\/ minimize CSS (true) or pretty print (false)\n\n\tpublic static $timing\t\t\t= false; \t\/\/ write timing info (a lot!) to wordpress debug.log if WP_DEBUG enabled\t\t\n\tpublic static $debug\t\t\t= false; \t\/\/ write debug info (a lot!) to wordpress debug.log if WP_DEBUG enabled\t\n\tpublic static $sample_text \t\t= 'The quick brown fox jumps over the lazy dog.';\t\n\n\t\/\/ ===== INTERNAL =====\n\tpublic \tstatic $prioritized_formats\t= ['eot','woff2','woff','ttf','otf','svg'];\n\tprivate static $fonts \t\t\t\t= null;\t\/\/ will be populated with fonts and related files we found\n\tprivate static $fonts_details_cache\t= [];\t\/\/ cache for already parsed font details\n\tprivate static $font_files_cnt\t\t= 0;\t\/\/ number of font files parsed\n\t\n\t\/\/-------------------------------------------------------------------------------------------------------------------\n\tstatic function init() {\n\n\t\t\/\/ Pre-fill font definitions\n\t\tself::get_font_families();\n\n\t\t\/\/ Emit custom font css in head \n\t\tadd_action( 'wp_head', function(){ \n\t\t\techo self::get_font_css(); \n\t\t},5);\n\n\t\t\/\/ Load CSS when we are in Gutenberg Editor. \n\t\t\/\/ Requires ma_customfont.css (for font loading) and oxygen.css\/universal.css (for font assignment)\n\t\tif ( isset($_REQUEST['post']) && isset($_REQUEST['action']) && ($_REQUEST['action']=='edit')) {\n\t\t\t\/\/ set up fonts dir and url\n\t\t\t$fonts_base = self::get_fonts_base(); \n\t\t\tif (!$fonts_base) \t{return false;}\n\t\t\t\/\/ enqueue ma_customfonts.css\n\t\t\twp_enqueue_style('ma_customfonts-gutenberg', $fonts_base->url.'\/ma_customfonts.css'); \n\t\t\tif (defined(\"CT_VERSION\")) { \/\/ Oxygen installed and active?\n\t\t\t\t\/\/ create custom style for body, h1-h6 from Oxygen global settings\n\t\t\t\t$ct_global_settings = maybe_unserialize(get_option('ct_global_settings'));\n\t\t\t\tif ($ct_global_settings && is_array($ct_global_settings)) {\n\t\t\t\t\t$gutenberg_font_css = sprintf(\n\t\t\t\t\t\t'body .editor-styles-wrapper{font-family:\"%1$s\";}'.\n\t\t\t\t\t\t'body .editor-styles-wrapper :is(h1,h2,h3,h4,h5,h6) {font-family:\"%2$s\";}',\n\t\t\t\t\t\t$ct_global_settings['fonts']['Text'], \t\/\/ text font\n\t\t\t\t\t\t$ct_global_settings['fonts']['Display']\t\/\/ heading font\n\t\t\t\t\t);\n\t\t\t\t\t\/\/ add custom style to overwrite Gutenberg's default font\n\t\t\t\t\twp_add_inline_style('ma_customfonts-gutenberg',$gutenberg_font_css); \n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t\n\t\t\/\/ Shortcode for testing custom fonts (listing all fonts with their formats, weights, styles)\n\t\tadd_shortcode('maltmann_custom_font_test', function( $atts, $content, $shortcode_tag ) {\n\t\t\treturn self::get_font_samples('shortcode');\n\t\t}); \n\n\t\t\/\/ Add submenu page to the Appearance menu.\n\t\tadd_action('admin_menu', function(){\n\t\t\tadd_submenu_page(\t'themes.php', \t\t\t\t\t\t\t\t\t\t\/\/ parent slug of \"Appearance\"\n\t\t\t\t\t\t\t\t_x('Custom Fonts','page title','ma_customfonts'), \t\/\/ page title\n\t\t\t\t\t\t\t\t_x('Custom Fonts','menu title','ma_customfonts'), \t\/\/ menu title\n\t\t\t\t\t\t\t\t'manage_options',\t\t\t\t\t\t\t\t\t\/\/ capabilitiy\n\t\t\t\t\t\t\t\t'ma_customfonts',\t\t\t\t\t\t\t\t\t\/\/ menu slug\n\t\t\t\t\t\t\t\t[__CLASS__, 'admin_customfonts']\t\t\t\t\t\t\t\/\/ function\n\t\t\t\t\t\t\t);\n\t\t});\n\t}\n\n\t\/\/-------------------------------------------------------------------------------------------------------------------\n\tstatic function get_script_version() {\n\t\t$implementation = basename(__FILE__) == 'ma-custom-fonts.php' ? 'Plugin' : 'Code Snippet';\n\t\treturn sprintf('%s, %s', $implementation, self::VERSION);\n\t}\n\t\/\/-------------------------------------------------------------------------------------------------------------------\n\t\/\/ Admin function Appearance > Custom Fonts to display samples of all detected fonts\n\tstatic function admin_customfonts() {\n\t\t$output =\t'<h1>' . esc_html(get_admin_page_title()) . '<\/h1>'.\n\t\t\t\t\tself::get_font_samples('admin');\n\t\techo $output;\n\t\techo self::get_font_css();\n\t}\n\t\/\/-------------------------------------------------------------------------------------------------------------------\n\t\/\/ parses weight from a font file name (not used for Web Font Loader packages)\n\tstatic function parse_font_name($name) {\n\t\t\/\/ already in cache?\n\t\tif (array_key_exists($name,self::$fonts_details_cache)) {return self::$fonts_details_cache[$name];}\n\t\t\n\t\t$retval = (object)['name'=>$name, 'weight'=>400, 'style'=>'normal'];\n\t\tif (!self::$parsename) {return $retval;}\n\t\t$st = microtime(true);\n\t\tif (WP_DEBUG && self::$debug) {error_log(sprintf('%s::%s() parsing font file name: \"%s\"',__CLASS__,__FUNCTION__, $retval->name));}\n\t\t$weights = (object)[ \/\/ must match from more to less specific !!\n\t\t\t\/\/ more specific\n\t\t\t200 => '\/[ \\-]?(200|((extra|ultra)\\-?light))\/i',\n\t\t\t800 => '\/[ \\-]?(800|((extra|ultra)\\-?bold))\/i',\n\t\t\t600 => '\/[ \\-]?(600|([ds]emi(\\-?bold)?))\/i',\n\t\t\t\/\/ less specific\n\t\t\t100 => '\/[ \\-]?(100|thin)\/i',\n\t\t\t300 => '\/[ \\-]?(300|light)\/i',\n\t\t\t400 => '\/[ \\-]?(400|normal|regular|book)\/i',\n\t\t\t500 => '\/[ \\-]?(500|medium)\/i',\n\t\t\t700 => '\/[ \\-]?(700|bold)\/i',\n\t\t\t900 => '\/[ \\-]?(900|black|heavy)\/i',\n\t\t\t'var' => '\/[ \\-]?(VariableFont)\/i',\n\t\t];\n\t\t$count = 0;\n\t\t\/\/ detect & cut style\n\t\t$new_name = preg_replace('\/[ \\-]?(italic|oblique)\/i', '', $retval->name, -1, $count); \n\t\tif ($new_name && $count) {\n\t\t\t$retval->name = $new_name;\n\t\t\t$retval->style = 'italic';\n\t\t\tif (WP_DEBUG && self::$debug) {error_log(sprintf('%s::%s() detected italic, new font family name: \"%s\"',__CLASS__,__FUNCTION__, $retval->name));}\n\t\t}\n\t\t\/\/ detect & cut weight\n\t\tforeach ($weights as $weight => $pattern) {\n\t\t\t$new_name = preg_replace($pattern, '', $retval->name, -1, $count);\n\t\t\tif ($new_name && $count) {\n\t\t\t\t$retval->name = $new_name;\n\t\t\t\t$retval->weight = $weight;\n\t\t\t\tif (WP_DEBUG && self::$debug) {error_log(sprintf('%s::%s() detected weight %s, new font family name: \"%s\"',__CLASS__,__FUNCTION__, $retval->weight, $retval->name));}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\/\/ cut -webfont\n\t\t$retval->name = preg_replace('\/[ \\-]?webfont$\/i', '', $retval->name); \n\t\t\/\/ variable font: detect & cut specifica\n\t\tif ($retval->weight == 'var') {\n\t\t\t$retval->name = preg_replace('\/_(opsz,wght|opsz|wght)$\/i', '', $retval->name); \n\t\t}\n\t\tif (WP_DEBUG && self::$debug) {error_log(sprintf('%s::%s() retval: [name:\"%s\", weigh:%d, style:%s]',__CLASS__,__FUNCTION__, $retval->name, $retval->weight, $retval->style));}\n\t\t\/\/ store to cache\n\t\tself::$fonts_details_cache[$name] = $retval;\n\t\t$et = microtime(true);\n\t\tif (WP_DEBUG && self::$timing) {error_log(sprintf('%s::%s() Timing: %.5f sec.',__CLASS__,__FUNCTION__,$et-$st));}\n\t\treturn $retval;\n\t}\n\t\/\/-------------------------------------------------------------------------------------------------------------------\n\t\/\/ construct CSS block from CSS properties stored in JSON from Web Font Loader\n\tstatic \tfunction create_css_from_ruleset($css_ruleset) {\n\t\t$retval = '';\n\t\tif (isset($css_ruleset)) {\n\t\t\tif (isset($css_ruleset->{'comment'})) {$retval .= sprintf(\"\/* %s *\/\\n\",$css_ruleset->{'comment'});}\n\t\t\t$retval .= \"@font-face {\\n\";\n\t\t\t$retval .= sprintf(\"\\tfont-family: '%s';\\n\",$css_ruleset->{'font-family'});\n\t\t\t$retval .= sprintf(\"\\tfont-style: %s;\\n\",$css_ruleset->{'font-style'});\n\t\t\t$retval .= sprintf(\"\\tfont-weight: %s;\\n\",$css_ruleset->{'font-weight'});\n\t\t\t$retval .= sprintf(\"\\tsrc: url('%s') format('%s');\\n\",$css_ruleset->{'url'}, $css_ruleset->{'format'});\n\t\t\tif (isset($css_ruleset->{'unicode-range'})) {$retval .= sprintf(\"\\tunicode-range: %s;\\n\", $css_ruleset->{'unicode-range'});}\n\t\t\tif (self::$fontdisplay) {\n\t\t\t\t$retval .= sprintf(\"\\tfont-display: %s;\\n\",self::$fontdisplay);\n\t\t\t}\t\t\t\n\t\t\t$retval .= '}';\n\t\t}\n\t\treturn $retval;\n\t}\n\t\/\/-------------------------------------------------------------------------------------------------------------------\n\t\/\/ return base dir\/url for fonts. Create directory if necessary\n\tprivate static function get_fonts_base() {\n\t\t$retval = (object)['dir'=>null,'url'=>''];\n\t\t$fonts_dir_info = wp_get_upload_dir();\n\t\t$retval->dir = $fonts_dir_info['basedir'].'\/fonts';\n\t\t$retval->url = $fonts_dir_info['baseurl'].'\/fonts';\n\t\t\/\/ create fonts folder if not exists\n\t\tif (!file_exists($retval->dir)) {\n\t\t\tif (!@mkdir($retval->dir)) {\n\t\t\t\terror_log(sprintf('%s::%s() Error creating fonts base folder.', __CLASS__, __FUNCTION__)); \n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn $retval;\n\t}\n\t\/\/-------------------------------------------------------------------------------------------------------------------\n\t\/\/ find font files in font folder\n\tstatic function find_fonts() {\n\t\t$st = microtime(true);\n\t\tif (isset(self::$fonts)) return;\n\t\tself::$fonts = [];\n\t\t\/\/ set up fonts dir and url\n\t\t$fonts_base = self::get_fonts_base(); \n\t\tif (!$fonts_base) \t{return false;}\n\t\t\/\/ property $recursive either recursive or flat file scan\n\t\tif (self::$recursive) {\n\t\t\t\/\/ recursive scan for font files (including subdirectories)\n\t\t\t$directory_iterator = new RecursiveDirectoryIterator($fonts_base->dir,  RecursiveDirectoryIterator::SKIP_DOTS | RecursiveDirectoryIterator::UNIX_PATHS);\n\t\t\t$file_iterator = new RecursiveIteratorIterator($directory_iterator);\n\t\t} else {\n\t\t\t\/\/ flat scan for font files (no subdirectories)\n\t\t\t$file_iterator = new FilesystemIterator($fonts_base->dir);\n\t\t}\n\t\t\/\/ loop through files and collect font and JSON files\n\t\t$font_splfiles = [];\n\t\t$json_splfiles = [];\n\t\tforeach( $file_iterator as $file) {\n\t\t\t\/\/ V3: A JSON file might be available from Web Font Loader\n\t\t\tif ($file->getExtension() == 'json') {\n\t\t\t\t$json_splfiles[] = $file;\n\t\t\t}\n\t\t\tif (in_array(strtolower($file->getExtension()), self::$prioritized_formats)) {\n\t\t\t\t$font_splfiles[] = $file;\n\t\t\t}\n\t\t}\n\t\t\n\t\t\/\/ V3: check JSON files. If it defines \"family\" read the font name and CSS\n\t\t$json_font_families = [];\n\t\tforeach ($json_splfiles as $json_splfile) {\n\t\t\tif ($font_details = @json_decode(@file_get_contents($json_splfile->getPathname()))) {\n\t\t\t\t\/\/ It's a JSON from Web Font Loader?\n\t\t\t\tif (isset($font_details->creator) && (strpos($font_details->creator, 'Web Font Loader')=== 0)) {\n\t\t\t\t\t\/\/ store font family name \n\t\t\t\t\t$json_font_families[$json_splfile->getBasename('.json')] = $font_details->family;\n\t\t\t\t\t\/\/ drop all collected font files for that font since they are listed in JSON file\n\t\t\t\t\t$font_path = $json_splfile->getPath().'\/';\n\t\t\t\t\tforeach ($font_splfiles as $idx => $font_splfile) {\n\t\t\t\t\t\tif (strpos($font_splfile->getPath().'\/',$font_path) === 0) {\n\t\t\t\t\t\t\tself::$font_files_cnt ++;\n\t\t\t\t\t\t\tunset($font_splfiles[$idx]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$font_path = str_replace($fonts_base->dir,'',$font_path);\n\t\t\t\t\t\/\/ encode every single path element since we might have spaces or special chars \n\t\t\t\t\t$font_path = implode('\/',array_map('rawurlencode',explode('\/',$font_path)));\n\t\t\t\t\t\n\t\t\t\t\t\/\/ add CSS blocks (could be multiple unicode ranges) to fonts list\n\n\t\t\t\t\t$font_baseurl = $fonts_base->url . $font_path;\n\t\t\t\t\tforeach ($font_details->css as $css_ruleset) {\n\t\t\t\t\t\tself::$fonts[$css_ruleset->{'font-family'}][$css_ruleset->{'font-weight'}.'\/'.$css_ruleset->{'font-style'}]['has_css'] = true;\n\t\t\t\t\t\t\/\/ only formats woff and woff2, so just use format as file extension slot\n\t\t\t\t\t\tif (!isset(self::$fonts[$css_ruleset->{'font-family'}][$css_ruleset->{'font-weight'}.'\/'.$css_ruleset->{'font-style'}][$css_ruleset->{'format'}])) {\n\t\t\t\t\t\t\tself::$fonts[$css_ruleset->{'font-family'}][$css_ruleset->{'font-weight'}.'\/'.$css_ruleset->{'font-style'}][$css_ruleset->{'format'}] = [];\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$css_ruleset->url = $font_baseurl . $css_ruleset->url;\n\n\t\t\t\t\t\t$css_block = self::create_css_from_ruleset($css_ruleset);\n\t\t\t\t\t\tself::$fonts[$css_ruleset->{'font-family'}][$css_ruleset->{'font-weight'}.'\/'.$css_ruleset->{'font-style'}][$css_ruleset->{'format'}][] = $css_block;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\/\/ collect font definitions\n\t\tforeach ($font_splfiles as $font_splfile) {\n\t\t\tself::$font_files_cnt ++;\n\t\t\t$font_ext = $font_splfile->getExtension();\n\t\t\t$font_details = self::parse_font_name($font_splfile->getbasename('.'.$font_ext));\n\t\t\t$font_name = $font_details->name;\n\t\t\tif (in_array($font_name,array_values($json_font_families))) {\n\t\t\t\t\/\/ already found this font from Web Font Loader. Skip.\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$font_weight = $font_details->weight;\n\t\t\t$font_style = $font_details->style;\n\t\t\t$font_path = str_replace($fonts_base->dir,'',$font_splfile->getPath());\n\t\t\t\/\/ encode every single path element since we might have spaces or special chars \n\t\t\t$font_path = implode('\/',array_map('rawurlencode',explode('\/',$font_path)));\n\t\t\t\/\/ create entry for this font name\n\t\t\tif (!array_key_exists($font_name,self::$fonts)) {self::$fonts[$font_name] = [];}\n\t\t\t\/\/ create entry for this font weight\/style \n\t\t\tif (!array_key_exists($font_weight.'\/'.$font_style,self::$fonts[$font_name])) {self::$fonts[$font_name][$font_weight.'\/'.$font_style] = [];}\n\t\t\t\/\/ store font details for this file\n\t\t\tself::$fonts[$font_name][$font_weight.'\/'.$font_style][$font_ext] = $fonts_base->url . $font_path . '\/' . rawurlencode($font_splfile->getBasename());\n\t\t}\n\t\tksort(self::$fonts, SORT_NATURAL | SORT_FLAG_CASE);\n\t\tif (WP_DEBUG && self::$debug) {error_log(sprintf('%s::%s() final fonts: %s]',__CLASS__,__FUNCTION__, print_r(self::$fonts,true)));}\n\t\t$et = microtime(true);\n\t\tif (WP_DEBUG && self::$timing) {error_log(sprintf('%s::%s() %d font files, %d font families.',__CLASS__,__FUNCTION__, self::$font_files_cnt, count(self::$fonts)));}\n\t\tif (WP_DEBUG && self::$timing) {error_log(sprintf('%s::%s() Timing: %.5f sec.',__CLASS__,__FUNCTION__,$et-$st));}\n\t}\n\t\/\/-------------------------------------------------------------------------------------------------------------------\n\t\/\/ returns a list of font families\n\tstatic function get_font_families() {\n\t\tif (!isset(self::$fonts)) self::find_fonts();\n\t\t$st = microtime(true);\n\t\t$font_family_list = [];\n\t\tforeach (array_keys(self::$fonts) as $font_name) {\n\t\t\t$font_family_list[] = $font_name;\n\t\t}\n\t\t$et = microtime(true);\n\t\tif (WP_DEBUG && self::$timing) {error_log(sprintf('%s::%s() Timing: %.5f sec.',__CLASS__,__FUNCTION__,$et-$st));}\n\t\treturn $font_family_list;\n\t}\n\t\/\/-------------------------------------------------------------------------------------------------------------------\n\t\/\/ we call this function from footer emitter to get font definitions for emitting required files\n\tstatic function get_font_definitions() {\n\t\treturn self::$fonts;\n\t}\n\t\/\/-------------------------------------------------------------------------------------------------------------------\n\t\/\/ creates and emits CSS for custom fonts\n\tstatic function get_font_css() {\n\t\t\/\/ emit CSS for fonts in footer\n\t\t$st = microtime(true);\n\t\t$version = self::get_script_version();\n\t\t$style = '';\n\t\t\/\/ set up fonts dir and url\n\t\t$fonts_base = self::get_fonts_base(); \n\t\tif (!$fonts_base) \t{return false;}\n\t\tforeach (self::$fonts as $font_name => $font_details) {\n\t\t\tksort($font_details);\n\t\t\tforeach ($font_details as $weight_style => $file_list) {\n\t\t\t\tlist ($font_weight,$font_style) = explode('\/',$weight_style);\n\n\t\t\t\tif (isset($file_list['has_css'])) {\n\t\t\t\t\t\/\/ V3: Google Font package CSS from Web Font Loader already has CSS\n\t\t\t\t\tforeach (array_reverse(self::$prioritized_formats) as $font_ext) {\n\t\t\t\t\t\t\/\/ we only have woff and woff2\n\t\t\t\t\t\tif (!isset($file_list[$font_ext])) { continue; }\n\t\t\t\t\t\tforeach ($file_list[$font_ext] as $css) {\n\t\t\t\t\t\t\t$style .= trim($css).PHP_EOL;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t\/\/ V2: Only have font info and file names. Build CSS\n\t\t\t\t\tif ($font_weight == 'var') {\n\t\t\t\t\t\t$font_weight_output = '100 900';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$font_weight_output = $font_weight;\n\t\t\t\t\t}\n\t\t\t\t\t$style .= \t'@font-face{'.PHP_EOL.\n\t\t\t\t\t\t\t\t'  font-family:\"'.$font_name.'\";'.PHP_EOL.\n\t\t\t\t\t\t\t\t'  font-weight:'.$font_weight_output.';'.PHP_EOL.\n\t\t\t\t\t\t\t\t'  font-style:'.$font_style.';'.PHP_EOL;\n\t\t\t\t\t\t\t\t\/\/ .eot needs special handling for IE9 Compat Mode\n\t\t\t\t\tif (array_key_exists('eot',$file_list)) {$style .= '  src:url(\"'.$file_list['eot'].'\");'.PHP_EOL;}\n\t\t\t\t\t$urls = [];\n\n\t\t\t\t\t\/\/ output font sources in prioritized order\n\t\t\t\t\tforeach (self::$prioritized_formats as $font_ext) {\n\t\t\t\t\t\tif (array_key_exists($font_ext,$file_list)) {\n\t\t\t\t\t\t\t$font_url = $file_list[$font_ext];\n\t\t\t\t\t\t\t$format = '';\n\t\t\t\t\t\t\tswitch ($font_ext) {\n\t\t\t\t\t\t\t\tcase 'eot': $format = 'embedded-opentype'; break;\n\t\t\t\t\t\t\t\tcase 'otf': $format = 'opentype'; break;\n\t\t\t\t\t\t\t\tcase 'ttf': $format = 'truetype'; break;\n\t\t\t\t\t\t\t\t\/\/ others have same format as extension (svg, woff, woff2)\n\t\t\t\t\t\t\t\tdefault:\t$format = strtolower($font_ext);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif ($font_ext == 'eot') {\n\t\t\t\t\t\t\t\t\/\/ IE6-IE8\n\t\t\t\t\t\t\t\t$urls[] = 'url(\"'.$font_url.'?#iefix\") format(\"'.$format.'\")';\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$urls[] = 'url(\"'.$font_url.'\") format(\"'.$format.'\")';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$style .= '  src:' . join(','.PHP_EOL.'      ',$urls) . ';'.PHP_EOL;\n\t\t\t\t\tif (self::$fontdisplay) {\n\t\t\t\t\t\t$style .= sprintf('  font-display: %s;'.PHP_EOL,self::$fontdisplay);\n\t\t\t\t\t}\n\t\t\t\t\t$style .= '}'.PHP_EOL;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\/\/ if Oxygen Builder is active, emit CSS to show custom fonts in light blue.\n\t\t$builder_style = defined('SHOW_CT_BUILDER') ? 'div.oxygen-select-box-option.ng-binding.ng-scope[ng-repeat*=\"elegantCustomFonts\"] {color:lightblue !important;}' : '';\n\t\t\n\t\t\n\t\tif (WP_DEBUG && self::$debug) {error_log(sprintf('%s::%s() style: %s]',__CLASS__,__FUNCTION__, $style));}\n\t\t\/\/ minimize string if configured\n\t\tif (self::$cssminimize) {\n\t\t\t$style = preg_replace('\/\\r?\\n *\/','',$style); \n\t\t}\n\n\t\t$retval = '';\n\t\tif (self::$cssoutput == 'file') {\n\t\t\t\/\/ option: write CSS to file\n\t\t\t$css_path = $fonts_base->dir.'\/ma_customfonts.css';\n\t\t\tfile_put_contents($css_path, '\/* Version: '.$version.' *\/'.PHP_EOL.$style);\n\t\t\t$css_url = str_replace($fonts_base->dir,$fonts_base->url ,$css_path);\n\t\t\t$retval = sprintf('<link id=\"MA_CustomFonts\" itemprop=\"stylesheet\" href=\"%s?%s\" rel=\"stylesheet\" type=\"text\/css\" \/>%s',$css_url, hash_file('CRC32', $css_path, false), $builder_style?'<style>'.$builder_style.'<\/style>':'');\n\t\t}\n\t\tif (self::$cssoutput == 'html') {\n\t\t\t\/\/ option: write CSS to html\n\t\t\t$retval = '<style id=\"MA_CustomFonts\">'.'\/* Version: '.$version.' *\/'.PHP_EOL.$style.PHP_EOL.$builder_style.'<\/style>';\n\t\t}\n\n\n\t\t$et = microtime(true);\n\t\tif (WP_DEBUG && self::$timing) {error_log(sprintf('%s::%s() Timing: %.5f sec.',__CLASS__,__FUNCTION__,$et-$st));}\n\t\treturn $retval;\n\t}\n\t\/\/-------------------------------------------------------------------------------------------------------------------\n\tstatic function get_font_file_info_from_css($css) {\n\t\t$retval = [];\n\t\tif (!is_array($css)) {$css = [$css];}\n\t\tforeach($css as $css_block) {\n\t\t\tif (preg_match('\/url\\(\\'(.*?)\\'\\)\/',$css_block,$matches)) {\n\t\t\t\t$retval[] = $matches[1];\n\t\t\t}\n\t\t}\n\t\t$retval = array_unique($retval); \n\t\treturn $retval;\n\t}\n\t\/\/-------------------------------------------------------------------------------------------------------------------\n\t\/\/ returns HTML code to display all registered custom fonts\n\t\/\/ $mode 'admin':\t\tformatting to be displayed on WP Admin > Appearance\n\t\/\/ $mode 'shortcode':\tformatting to be displayed as shortcode output\n\tstatic function get_font_samples($mode = null) {\n\t\t$st = microtime(true);\n\t\t$output = '';\n\t\t$script_version = self::get_script_version();\n\t\t$output = \t'<style>'.\n\t\t\t\t\t'#ma_customfonts-input-font-size {width:60px;text-align:center;min-height:1em;line-height:1em;padding:0;}'.\n\t\t\t\t\t'#ma_customfonts-input-sample-text {width:400px;text-align:left;}'.\n\t\t\t\t\t'.ma_customfonts-label {display:inline-block;width:150px;line-height:2em;}'.\n\t\t\t\t\t'.ma_customfonts-font-row {display:flex;flex-direction:row;justify-content:space-between;align-items:center;padding:0;line-height:20px;border-bottom:1px solid #e0e0e0;margin:0 1em;}'.\n\t\t\t\t\t'.ma_customfonts-font-row:hover {background-color:lightgray;}'.\n\t\t\t\t\t'.ma_customfonts-font-info {font-size:10px;line-height:1em;width:100px;}'.\n\t\t\t\t\t'.ma_customfonts-font-sample {font-size:15px;line-height:1em;flex-grow:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;}'.\n\t\t\t\t\t'.ma_customfonts-format-info {font-size:10px;cursor:help;margin-left:1em;}'.\n\t\t\t\t\t'.ma_customfonts-simulated {display: none;}'.\n\t\t\t\t\t'<\/style>'.\n\t\t\t\t\t'<div '.($mode=='shortcode'?'style=\"display:inline-block;border:1px dashed darkgray;padding:10px;\"':'').'>'.\n\t\t\t\t\t\t($mode=='shortcode'?'<h2>MA Custom Fonts<\/h2>':'').\n\t\t\t\t\t\t'<div style=\"display:inline-block;border:1px solid darkgray;border-radius:10px;padding:10px;\">'.\n\t\t\t\t\t\t\t'<span class=\"ma_customfonts-label\">Version:<\/span> '.$script_version.'<br\/>'.\n\t\t\t\t\t\t\t'<span class=\"ma_customfonts-label\">Font Families:<\/span> '.count(self::$fonts).'<br\/>'.\n\t\t\t\t\t\t\t'<span class=\"ma_customfonts-label\">Font Files:<\/span> '.self::$font_files_cnt.'<br\/>'.\n\t\t\t\t\t\t\t'<span class=\"ma_customfonts-label\">Sample Font Size:<\/span> '.\n\t\t\t\t\t\t\t\t'<input id=\"ma_customfonts-input-font-size\" type=\"number\" value=\"15\" onchange=\"ma_customfonts_change_font_size();\"><br\/>'.\n\t\t\t\t\t\t\t'<span class=\"ma_customfonts-label\">Sample Text:<\/span> '.\n\t\t\t\t\t\t\t\t'<input id=\"ma_customfonts-input-sample-text\" value=\"'.self::$sample_text.'\" onkeyup=\"ma_customfonts_change_sample_text();\"><br\/>'.\n\t\t\t\t\t\t\t'<span class=\"ma_customfonts-label\">Simulated:<\/span> '.\n\t\t\t\t\t\t\t\t'<input id=\"ma_customfonts-input-simulated\" type=\"checkbox\" value=\"simulated\" onchange=\"ma_customfonts_toggle_simulated();\"> Show font weights\/styles without files as browser would simulate.<br\/>'.\n\t\t\t\t\t\t'<\/div>';\n\n\t\t\/\/ controls\n\t\t$controls_script = <<<'END_OF_CONTROLS_SCRIPT'\n\t\t<script>\n\t\tfunction changeCss(className, classValue) {\n\t\t\t\/\/ we need invisible container to store additional css definitions\n\t\t\tvar cssMainContainer = jQuery('#css-modifier-container');\n\t\t\tif (cssMainContainer.length == 0) {\n\t\t\t\tcssMainContainer = jQuery('<div id=\"css-modifier-container\"><\/div>');\n\t\t\t\tcssMainContainer.hide().appendTo(jQuery('body'));\n\t\t\t}\n\t\t\t\/\/ we need one div for each class\n\t\t\tvar classContainer = cssMainContainer.find('div[data-class=\"' + className + '\"]');\n\t\t\tif (classContainer.length == 0) {\n\t\t\t\tclassContainer = jQuery('<div data-class=\"' + className + '\"><\/div>');\n\t\t\t\tclassContainer.appendTo(cssMainContainer);\n\t\t\t}\n\t\t\t\/\/ append additional style\n\t\t\tclassContainer.html('<style>' + className + ' {' + classValue + '}<\/style>');\n\t\t}\n\t\tfunction ma_customfonts_change_font_size() {\n\t\t\tvar $val = jQuery('#ma_customfonts-input-font-size').val();\n\t\t\tchangeCss('.ma_customfonts-font-sample','font-size: '+$val+'px;');\n\t\t}\n\t\tfunction ma_customfonts_change_sample_text() {\n\t\t\tvar $val = jQuery('#ma_customfonts-input-sample-text').val();\n\t\t\tjQuery('.ma_customfonts-font-sample').text($val);\n\t\t}\n\t\tfunction ma_customfonts_toggle_simulated() {\n\t\t\tvar $simulated = jQuery('#ma_customfonts-input-simulated').is(':checked');\n\t\t\tjQuery('.ma_customfonts-simulated').css('display',$simulated?'flex':'none');\n\t\t}\n\t\t<\/script>\nEND_OF_CONTROLS_SCRIPT;\n\t\t$output .=  $controls_script;\n\t\t\/\/ prepare tags for every weight\/style combination\n\t\t$weights = [100,200,300,400,500,600,700,800,900];\n\t\t$styles = ['normal','italic'];\n\t\t$weights_styles = [];\n\t\tforeach ($weights as $weight) { foreach ($styles as $style) { $weights_styles[] = $weight.'\/'.$style; } }\n\t\t\/\/ display fonts in each weight\/style combination\n\t\t$sample_text = self::$sample_text;\n\n\t\t\/\/ build output\n\t\tforeach (self::$fonts as $font_name => $font_details) {\n\t\t\t$output .= sprintf('<h3 style=\"padding-top: 20px;\">%1$s<\/h3>',$font_name);\n\t\t\tksort($font_details);\n\t\t\tforeach ($weights_styles as $weight_style) {\n\t\t\t\tlist ($weight,$style) = explode('\/',$weight_style);;\n\t\t\t\t$font_file_info = '';\n\t\t\t\t$font_file_list = [];\n\t\t\t\tif (isset($font_details[$weight_style])) {\n\t\t\t\t\t\/\/ walk through possible file formats\n\t\t\t\t\tforeach (self::$prioritized_formats as $font_ext) {\n\t\t\t\t\t\t\/\/ details available for this specific file format?\n\t\t\t\t\t\tif (isset($font_details[$weight_style][$font_ext])) {\n\t\t\t\t\t\t\t\/\/ details content type\n\t\t\t\t\t\t\tif (isset($font_details[$weight_style]['has_css'])) {\t\n\t\t\t\t\t\t\t\t\/\/ CSS\n\t\t\t\t\t\t\t\t$font_file_list[$font_ext] = self::get_font_file_info_from_css($font_details[$weight_style][$font_ext]);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\/\/ just file name\n\t\t\t\t\t\t\t\t$font_file_list[$font_ext] = [$font_details[$weight_style][$font_ext]];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\/\/ build font file info output\n\t\t\t\t\tforeach ($font_file_list as $format => $files) {\n\t\t\t\t\t\t\/\/ cut leading path\/url from file info\n\t\t\t\t\t\t$files = str_replace(wp_get_upload_dir(),'',$files);\n\t\t\t\t\t\t\/\/ decode html entities (e.g. %20) in file path\n\t\t\t\t\t\tforeach ($files as &$file) {$file = implode('\/',array_map('rawurldecode',explode('\/',$file)));;}\n\t\t\t\t\t\t\/\/ convert array to html\n\t\t\t\t\t\t$font_file_list[$format] = sprintf('<span title=\"%2$s\">%1$s<\/span>', strtoupper($format), implode(\"\\n\",$files));\n\t\t\t\t\t}\n\t\t\t\t\t$font_file_info = '<span class=\"ma_customfonts-format-info\">(' . implode(', ',array_values($font_file_list)) . ')<\/span>';\n\t\t\t\t}\n\n\t\t\t\t$output .= sprintf(\t'<div class=\"ma_customfonts-font-row '.($font_file_info?'':'ma_customfonts-simulated').'\">'.\n\t\t\t\t\t\t\t\t\t\t'<span class=\"ma_customfonts-font-info\">%2$s %3$s<\/span>'.\n\t\t\t\t\t\t\t\t\t\t'<span class=\"ma_customfonts-font-sample\" style=\"font-family:\\'%1$s\\';font-weight:%2$d;font-style:%3$s\">%4$s<\/span>%5$s'.\n\t\t\t\t\t\t\t\t\t'<\/div>',$font_name, $weight, $style, $sample_text, $font_file_info?$font_file_info:'<span class=\"ma_customfonts-format-info\"><em>(simulated)<\/em><\/span>');\n\n\t\t\t}\n\t\t}\n\t\t$output .= '<\/div>';\n\n\t\t$et = microtime(true);\n\t\tif (WP_DEBUG && self::$timing) {error_log(sprintf('%s::%s() Timing: %.5f sec.',__CLASS__,__FUNCTION__,$et-$st));}\n\t\treturn $output;\n\n\t}\n} \/\/ end of class MA_CustomFonts\n\n\nendif; \/\/ end of conditional implementations\n\n\n\/\/ check if we have to run\n$run = true;\n$ajax = wp_doing_ajax();\n$cron = wp_doing_cron();\nif ($ajax) $run = false;\t\t\/\/ don't run for AJAX requests\nif ($cron) $run = false;\t\t\/\/ don't run for CRON requests\n#if (preg_match('\/\\.(ico|gif|png|jpg|jpeg)$\/i',@$_SERVER['REQUEST_URI'])) $run = false; \/\/ don't run for WP generated images\nif (preg_match('\/\\.(ico)$\/i',@$_SERVER['REQUEST_URI'])) $run = false; \/\/ don't run for WP generated images\n\/\/ output the request for optimization process\nif (WP_DEBUG && (MA_CustomFonts::$debug || MA_CustomFonts::$timing)) {error_log(sprintf('MA_CustomFonts: %s%sRequest action=\"%s\", URI=\"%s\" => run: %s', $ajax?'AJAX ':'', $cron?'CRON ':'',@$_REQUEST['action'], @$_SERVER['REQUEST_URI'], $run?'true':'false'));}\nif (!$run) return;\n\n\n\/\/ Initialize\nadd_action('plugins_loaded',function(){\n\n\tMA_CustomFonts::init();\n});\n\n\/\/-------------------------------------------------------------------------------------------------------------------\n\/\/ Warn if plugins \"Elegant Custom Forms\", \"Use Any Font\", \"Swiss Knife \/ Font Manager\" are active\nadd_action('wp_loaded',function(){\n\t$GLOBALS['ma_custom_fonts_incompatible_plugins'] = [];\n\tif (function_exists('is_plugin_active') && is_plugin_active('elegant-custom-fonts\/elegant-custom-fonts.php'))\n\t\t{$GLOBALS['ma_custom_fonts_incompatible_plugins'][] = '\"Elegant Custom Fonts\"';}\n\tif (function_exists('is_plugin_active') && is_plugin_active('use-any-font\/use-any-font.php'))\n\t\t{$GLOBALS['ma_custom_fonts_incompatible_plugins'][] = '\"Use Any Font\"';}\n\tif (function_exists('is_plugin_active') && is_plugin_active('swiss-knife\/swiss-knife.php') && (get_option('swiss_font_manager')=='yes')) \t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t{$GLOBALS['ma_custom_fonts_incompatible_plugins'][] = '\"Swiss Knife\" with feature \"Font Manager\" enabled';}\n\t\/\/ show message on incompatible plugins\n\tif (is_admin()) {\n\t\tif (count($GLOBALS['ma_custom_fonts_incompatible_plugins'])) {\n\t\t\tadd_action('admin_notices', function(){\n\t\t\t\tif (WP_DEBUG ) {error_log('$ma_custom_fonts_incompatible_plugins: '.print_r($GLOBALS['ma_custom_fonts_incompatible_plugins'],true));}\n\t\t\t\techo '<div class=\"notice notice-warning is-dismissible\">\n\t\t\t\t\t\t<p>The Code Snippet \"Oxygen: Custom Fonts\" is not compatible with the Plugin '.implode(' or ',$GLOBALS['ma_custom_fonts_incompatible_plugins']).'.<br\/>\n\t\t\t\t\t\tPlease deactivate either the Code Snippet or the Plugin (feature).<\/p>\n\t\t\t\t\t<\/div>';\n\t\t\t});\n\t\t}\n\t}\n\n\tif (count($GLOBALS['ma_custom_fonts_incompatible_plugins'])) return;\n\t\n\n\t\/\/-------------------------------------------------------------------------------------------------------------------\n\t\/\/ create a primitive ECF_Plugin class if plugin \"Elegant Custom Fonts\" is not installed\n\tif (!count($GLOBALS['ma_custom_fonts_incompatible_plugins']) && !class_exists('ECF_Plugin')) {\n\t\tclass ECF_Plugin {\n\t\t\tstatic function get_font_families() {\n\t\t\t\t$st = microtime(true);\n\t\t\t\t$font_family_list = MA_CustomFonts::get_font_families();\n\t\t\t\t$et = microtime(true);\n\t\t\t\tif (WP_DEBUG && MA_CustomFonts::$timing) {error_log(sprintf('MA_CustomFonts\/%s::%s() Timing: %.5f sec.',__CLASS__,__FUNCTION__,$et-$st));}\n\t\t\t\treturn $font_family_list;\n\t\t\t}\n\t\t}\n\t}\n\t\n\n},1000); \/\/ hook late to check other plugins!\n","priority":"10"}]}